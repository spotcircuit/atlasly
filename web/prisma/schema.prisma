// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(USER)

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Directory models
enum ClaimStatus {
  UNCLAIMED
  PENDING
  VERIFIED
}

model Listing {
  id           String   @id @default(cuid())
  slug         String   @unique
  name         String
  website      String?
  description  String?
  phone        String?
  email        String?
  address      String?
  city         String
  state        String
  postalCode   String
  country      String   @default("US")
  lat          Float?
  lng          Float?
  rating       Float?
  reviewCount  Int?
  brands       String[]
  financing    String[]
  categories   ListingCategory[]
  leads        Lead[]
  planCode     String?
  planWeight   Int       @default(0)
  claimStatus  ClaimStatus @default(UNCLAIMED)
  ownerId      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Category {
  id       String   @id @default(cuid())
  slug     String   @unique
  label    String
  listings ListingCategory[]
}

model ListingCategory {
  listingId  String
  categoryId String
  listing    Listing  @relation(fields: [listingId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([listingId, categoryId])
}

model Lead {
  id        String   @id @default(cuid())
  listingId String?
  listing   Listing? @relation(fields: [listingId], references: [id])
  name      String
  email     String
  phone     String
  zip       String
  interest  String
  timeline  String
  budget    String?
  consentTs DateTime
  ip        String?
  utm       Json?
  createdAt DateTime @default(now())
}
